<?xml version="1.0"?>
<doc>
<assembly>
<name>
clsCj2008
</name>
</assembly>
<members>
<member name="M:clsCj2008.classCJ.apiGetWinClass(System.Int32)">
	<summary>Get class name from a window</summary>
	<param name="hWnd">Handle of window to get class name of</param>
	<returns>String containing Class Name of window</returns>
	<remarks>Uses User32.dll API</remarks>
</member><member name="M:clsCj2008.classCJ.apiGetWinText(System.Int32)">
	<summary>Get the text from a window</summary>
	<param name="hWnd">Handle of window to get text from</param>
	<returns>String with text of window</returns>
	<remarks>Uses User32.dll API</remarks>
</member><member name="M:clsCj2008.classCJ.apiSendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
	<summary>Sends msg to window using User32.dll API</summary>
	<param name="hWnd">Handle of window to send msg</param>
	<param name="wMsg">Msg to send</param>
	<param name="wParam">Parameter 1</param>
	<param name="lParam">Parameter 2</param>
	<returns>Result from SendMessage()</returns>
	<remarks>Uses User32.dll API, Use Msgs Class to get list of messages to send</remarks>
</member><member name="M:clsCj2008.classCJ.apiReleaseCapture">
	<summary>Release Capture</summary>
	<returns>Result from ReleaseCapture</returns>
	<remarks>Uses User32.dll API</remarks>
</member><member name="P:clsCj2008.classCJ.AppName">
	<summary>Name for application, to be used in Error Handling Messages, Messagebox's, etc.</summary>
	<value>String</value>
</member><member name="P:clsCj2008.classCJ.iPortCJ">
	<summary>Reserved for specific application use. Returns 50505</summary>
	<remarks>You should not need to use this EVER.</remarks>
	<value>Integer</value>
</member><member name="M:clsCj2008.classCJ.ErrFile(System.String,System.Exception)">
	<summary>Writes errors to a specified file name.</summary>
	<param name="sFileName">Filename to write errors out.</param>
	<param name="eR">Exception object to retrieve info from.</param>
	<returns>Returns <paramref name="Boolean"/> value indicating whether the file-write was a success.</returns>
</member><member name="M:clsCj2008.classCJ.dBugFile(System.String,System.String)">
	<summary>Writes debug info to a specified file name.</summary>
	<param name="sFileName">Filename to write debug info out.</param>
	<param name="sDebugString">Debug info to write.</param>
	<returns>Returns <paramref name="Boolean"/> value indicating whether the file-write was a success.</returns>
</member><member name="M:clsCj2008.classCJ.LoadList(System.String,System.Object,System.Boolean)">
	<summary>Loads a specified file into a Listbox/Combobox.</summary>
	<param name="sFilName">Filename for list to read from.</param>
	<param name="Lst">Listbox/Combobox to load file into.</param>
	<param name="bClearList">If TRUE, LoadList will clear the list before loading.</param>
	<returns>Returns <paramref name="Boolean"/> value indication whether the file-read was a success.</returns>
</member><member name="M:clsCj2008.classCJ.LstLoad(System.String,System.Object,System.Boolean)">
	<summary>Loads a specified file into a Listbox/Combobox.</summary>
	<param name="sFilName">Filename for list to read from.</param>
	<param name="Lst">Listbox/Combobox to load file into.</param>
	<param name="bClearList">If TRUE, LoadList will clear the list before loading.</param>
	<returns>Returns <paramref name="Boolean"/> value indication whether the file-read was a success.</returns>
</member><member name="M:clsCj2008.classCJ.SaveList(System.String,System.Object)">
	<summary>Saves a Listbox/Combobox into a specified file.</summary>
	<param name="sFilName">Filename to save list to.</param>
	<param name="Lst">Listbox/Combobox to load file into.</param>
	<returns>Returns <paramref name="Boolean"/> value indication whether the file-write was a success.</returns>
</member><member name="M:clsCj2008.classCJ.LstSave(System.String,System.Object)">
	<summary>Saves a Listbox/Combobox into a specified file.</summary>
	<param name="sFilName">Filename to save list to.</param>
	<param name="Lst">Listbox/Combobox to load file into.</param>
	<returns>Returns <paramref name="Boolean"/> value indication whether the file-write was a success.</returns>
</member><member name="M:clsCj2008.classCJ.ListFindItem(System.Object,System.String,System.Boolean,System.Boolean)">
	<summary>Searches Listbox/Combobox for a specified string, and returns the index of that item.</summary>
	<param name="Lst">Listbox/Combobox to search.</param>
	<param name="sItemToFind">String to search for.</param>
	<param name="bOnlyWholeString">If TRUE, the whole list item must match the search string. Otherwise, only part of the list item must match the search string.</param>
	<param name="bCaseSensative">If TRUE, the search is Case-Sensative. Otherwise, matching items will be returned no matter what the Case is.</param>
	<returns>Returns <paramref name="Integer"/> value of the found item's index. Otherwise, returns -1 if no item was found. </returns>
</member><member name="M:clsCj2008.classCJ.LstFindItem(System.Object,System.String,System.Boolean,System.Boolean)">
	<summary>Searches Listbox/Combobox for a specified string, and returns the index of that item.</summary>
	<param name="Lst">Listbox/Combobox to search.</param>
	<param name="sItemToFind">String to search for.</param>
	<param name="bOnlyWholeString">If TRUE, the whole list item must match the search string. Otherwise, only part of the list item must match the search string.</param>
	<param name="bCaseSensative">If TRUE, the search is Case-Sensative. Otherwise, matching items will be returned no matter what the Case is.</param>
	<returns>Returns <paramref name="Integer"/> value of the found item's index. Otherwise, returns -1 if no item was found. </returns>
</member><member name="M:clsCj2008.classCJ.ListAddToTopIf(System.Object,System.String,System.Int32)">
	<summary>Adds an item to the top of a Listbox/Combobox if the item doesn't already exist on the list.</summary>
	<param name="Lst">Listbox/Combobox to add the item to.</param>
	<param name="sItem">Item to add to the list.</param>
	<param name="iMaxItems">Maximum number of items allowed on the list.</param>
	<returns>Returns <paramref name="Boolean"/> value indicating the operation's success. </returns>
	<remarks>If the maximum number of items has been reached, the last item on the list is removed.</remarks>
</member><member name="M:clsCj2008.classCJ.LstAddToTopIf(System.Object,System.String,System.Int32)">
	<summary>Adds an item to the top of a Listbox/Combobox if the item doesn't already exist on the list.</summary>
	<param name="Lst">Listbox/Combobox to add the item to.</param>
	<param name="sItem">Item to add to the list.</param>
	<param name="iMaxItems">Maximum number of items allowed on the list.</param>
	<returns>Returns <paramref name="Boolean"/> value indicating the operation's success. </returns>
	<remarks>If the maximum number of items has been reached, the last item on the list is removed.</remarks>
</member><member name="M:clsCj2008.classCJ.ListAddToTop(System.Windows.Forms.ListBox,System.String,System.Int32)">
	<summary>Adds an item to the top of a Listbox/Combobox.</summary>
	<param name="Lst">Listbox/Combobox to add the item to.</param>
	<param name="sItem">Item to add to the list.</param>
	<param name="iMaxItems">Maximum number of items allowed on the list.</param>
	<returns>Returns <paramref name="Boolean"/> value indicating the operation's success. </returns>
	<remarks>If the maximum number of items has been reached, the last item on the list is removed.</remarks>
</member><member name="M:clsCj2008.classCJ.LstAddToTop(System.Windows.Forms.ListBox,System.String,System.Int32)">
	<summary>Adds an item to the top of a Listbox/Combobox.</summary>
	<param name="Lst">Listbox/Combobox to add the item to.</param>
	<param name="sItem">Item to add to the list.</param>
	<param name="iMaxItems">Maximum number of items allowed on the list.</param>
	<returns>Returns <paramref name="Boolean"/> value indicating the operation's success. </returns>
	<remarks>If the maximum number of items has been reached, the last item on the list is removed.</remarks>
</member><member name="M:clsCj2008.classCJ.LstAddItemIf(System.Object,System.String)">
	<summary>Adds an item to a Listbox/Combobox if it doesn't already exist on the list.</summary>
	<param name="Lst">Listbox/Combobox to add the item to.</param>
	<param name="s">Item to add to the list.</param>
	<returns>Returns <paramref name="Boolean"/> value indicating the operation's success. </returns>
</member><member name="M:clsCj2008.classCJ.LstAddFromStr(System.Object,System.String,System.String)">
	<summary>Adds multiple items to a Listbox/Combobox from a single character-seperated-string.</summary>
	<param name="Lst">Listbox/Combobox to add the items to.</param>
	<param name="sString">String containing items, each seperated by the Seperation Character.</param>
	<param name="sSeperatorCharacter">Optional character that seperates the list item, Default = ",".</param>
	<remarks>Example: Dim bSuccess as boolean = LstAddFromStr(Listbox1, "item1-item2-item3", "-") 'will add all 3 items seperately.</remarks>'
 <returns>Returns <paramref name="Boolean"/> value indicating the operation's success. </returns>
</member><member name="M:clsCj2008.classCJ.LstFindDupes(System.Object,System.Boolean)">
	<summary>Finds and removes duplicate items in a Listbox/Combobox.</summary>
	<param name="Lst1">Listbox/Combobox to search for duplicates.</param>
	<param name="bRemoveDupes">If TRUE, removes all duplicate items from the list. If FALSE, counts the duplicate items without removing them.</param>
	<returns>Returns <paramref name="Integer"/> value indicating the number of duplicate items found. If bRemoveDupes = TRUE then it returns the number of duplicate items removed. </returns>
</member><member name="M:clsCj2008.classCJ.dataTableLoad(System.Windows.Forms.ListView,System.String)">
	<summary>Loads an XML file DataSet to a ListView.</summary>
	<param name="LstV">ListView to add items to.</param>
	<param name="sFile">XML File to read from.</param>
	<remarks>Example: dataTableLoad (ListView1, "C:\My_XML_DataSet.xml")</remarks>
</member><member name="M:clsCj2008.classCJ.dataTableLoadProgress(System.Windows.Forms.ListView,System.String,System.Windows.Forms.ProgressBar)">
	<summary>Loads an XML file DataSet to a ListView while updating a ProgressBar.</summary>
	<param name="LstV">ListView to add items to.</param>
	<param name="sFile">XML File to read from.</param>
	<param name="sProgress">ProgressBar to update during the process.</param>
	<remarks>Example: dataTableLoad (ListView1, "C:\My_XML_DataSet.xml", ProgressBar1)</remarks>
</member><member name="M:clsCj2008.classCJ.dataTableSave(System.Windows.Forms.ListView,System.String)">
	<summary>Saves a ListView's DataSet to an XML file.</summary>
	<param name="LstV">ListView to read items from.</param>
	<param name="sFile">XML File to save to.</param>
	<remarks>Example: dataTableSave (ListView1, "C:\My_XML_DataSet.xml")</remarks>
</member><member name="M:clsCj2008.classCJ.dataTableSaveProgress(System.Windows.Forms.ListView,System.String,System.Windows.Forms.ProgressBar)">
	<summary>Saves a ListView's DataSet to an XML file while updating a ProgressBar.</summary>
	<param name="LstV">ListView to read items from.</param>
	<param name="sFile">XML File to save to.</param>
	<param name="sProgress">ProgressBar to update during the process.</param>
	<remarks>Example: dataTableSave (ListView1, "C:\My_XML_DataSet.xml", ProgressBar1)</remarks>
</member><member name="M:clsCj2008.classCJ.MsgB(System.String)">
	<summary>Displays a simple Messagebox with the Application name for a title.</summary>
	<param name="sMsg">Message to display.</param>
	<remarks>ClassCJ.sAppName property must be set prior to using this sub.</remarks>
	<returns><paramref name="DialogBoxResult"/> showing which button was pressed.</returns>
</member><member name="M:clsCj2008.classCJ.MsgBX(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
	<summary>Displays a detailed Messagebox with the Application name for a title.</summary>
	<param name="sMsg">Message to display.</param>
	<param name="btnButtons">MessageBoxButtons to use.</param>
	<param name="icnIcon">MessageBoxIcon to show.</param>
	<remarks>ClassCJ.sAppName property must be set prior to using this sub.</remarks>
	<returns><paramref name="DialogBoxResult"/> showing which button was pressed.</returns>
</member><member name="M:clsCj2008.classCJ.MsgBFull(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
	<summary>Displays a full Messagebox with the Application name for a title.</summary>
	<param name="sMsg">Message to display.</param>
	<param name="btnButtons">MessageBoxButtons to use.</param>
	<param name="btnDefault">Default Button. </param>
	<param name="icnIcon">Icon to show.</param>
	<param name="optOptions">MessageBoxOptions to use.</param>
	<remarks>ClassCJ.sAppName property must be set prior to using this sub.</remarks>
	<returns><paramref name="DialogBoxResult"/> showing which button was pressed.</returns>
</member><member name="M:clsCj2008.classCJ.MsgInfo(System.String)">
	<summary>Displays an Information Messagebox with the Application name for a title.</summary>
	<param name="sMsg">Message to display.</param>
	<remarks>ClassCJ.sAppName property must be set prior to using this sub.</remarks>
	<returns><paramref name="DialogBoxResult"/> showing which button was pressed.</returns>
</member><member name="M:clsCj2008.classCJ.MsgInfoYesNo(System.String)">
	<summary>Displays an Informational Yes/No Messagebox with the Application name for a title.</summary>
	<param name="sMsg">Message to display.</param>
	<remarks>ClassCJ.sAppName property must be set prior to using this sub.</remarks>
	<returns><paramref name="DialogBoxResult"/> showing which button was pressed.</returns>
</member><member name="M:clsCj2008.classCJ.MsgInfoOKCancel(System.String)">
	<summary>Displays an Informational OK/Cancel Messagebox with the Application name for a title.</summary>
	<param name="sMsg">Message to display.</param>
	<remarks>ClassCJ.sAppName property must be set prior to using this sub.</remarks>
	<returns><paramref name="DialogBoxResult"/> showing which button was pressed.</returns>
</member><member name="M:clsCj2008.classCJ.MsgInfoRetryCancel(System.String)">
	<summary>Displays an Informational Retry/Cancel Messagebox with the Application name for a title.</summary>
	<param name="sMsg">Message to display.</param>
	<remarks>ClassCJ.sAppName property must be set prior to using this sub.</remarks>
	<returns><paramref name="DialogBoxResult"/> showing which button was pressed.</returns>
</member><member name="M:clsCj2008.classCJ.MsgWarning(System.String)">
	<summary>Displays a Warning Messagebox with the Application name for a title.</summary>
	<param name="sMsg">Message to display.</param>
	<remarks>ClassCJ.sAppName property must be set prior to using this sub.</remarks>
	<returns><paramref name="DialogBoxResult"/> showing which button was pressed.</returns>
</member><member name="M:clsCj2008.classCJ.MsgYesNo(System.String)">
	<summary>Displays a Yes/No Messagebox with the Application name for a title.</summary>
	<param name="sMsg">Message to display.</param>
	<remarks>ClassCJ.sAppName property must be set prior to using this sub.</remarks>
	<returns><paramref name="DialogBoxResult"/> showing which button was pressed.</returns>
</member><member name="M:clsCj2008.classCJ.MsgOKCancel(System.String,System.Boolean)">
	<summary>Displays an OK/Cancel Messagebox with the Application name for a title.</summary>
	<param name="sMsg">Message to display.</param>
	<remarks>ClassCJ.sAppName property must be set prior to using this sub.</remarks>
	<returns><paramref name="DialogBoxResult"/> showing which button was pressed.</returns>
</member><member name="M:clsCj2008.classCJ.MsgERRSoft(System.String)">
	<summary>Displays an Error Messagebox with the Application name for a title.</summary>
	<param name="sMsg">Message to display.</param>
	<remarks>ClassCJ.sAppName property must be set prior to using this sub.</remarks>
	<returns><paramref name="DialogBoxResult"/> showing which button was pressed.</returns>
</member><member name="M:clsCj2008.classCJ.MsgERR(System.Exception,System.Boolean,System.Boolean)">
	<summary>Displays a Detailed Error Messagebox with the Application name for a title.</summary>
	<param name="eR">Exception object to retrieve info from.</param>
	<param name="bShowFullDetails">If TRUE, shows Inner Exception details when available.</param>
	<param name="bShowStackTrace">If TRUE, shows the Stack Trace information for the Exception.</param>
	<remarks>ClassCJ.sAppName property must be set prior to using this sub.</remarks>
	<returns><paramref name="DialogBoxResult"/> showing which button was pressed.</returns>
</member><member name="M:clsCj2008.classCJ.FormSetPos(System.Windows.Forms.Form,System.String,System.String)">
	<summary>Sets a Form's position on screen.</summary>
	<param name="fForm">Form to move.</param>
	<param name="strLeft"><paramref name="String"/> indicating the Form's Left position.</param>'
 <param name="strTop"><paramref name="String"/> indicating the Form's top position.</param>
	<remarks>Example: FormSetPos (Me, "Center", "Top") 'Sets the form in the top-center of the screen</remarks>
</member><member name="M:clsCj2008.classCJ.FormDrag(System.Windows.Forms.Form,System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary>Drags a borderless form...</summary>
	<param name="fForm">Form to drag.</param>
	<param name="sender">Sender passed from Mouse_Down event.</param>
	<param name="e">e pass from Mouse_Down event.</param>
	<remarks>Must be placed in Mouse_Down event where you want to drag from...</remarks>
</member><member name="M:clsCj2008.classCJ.FindPercent(System.Double,System.Double)">
	<summary>Finds what percentage a number is of another.</summary>
	<param name="dIsPercent">Lower number, to find percentage.</param>
	<param name="dOfThisNumber">Higher number, of what percentage.</param>
	<remarks>Example: Dim dAnswer as Double = FindPercent(70, 200) 'Returns 35 (70 is 35 percent of 200)</remarks>
	<returns><paramref name="Double"/>-type value of the answer.</returns>
</member><member name="M:clsCj2008.classCJ.FindXPercent(System.Double,System.Double)">
	<summary>Finds x percentage of a number.</summary>
	<param name="dWhatPercentOf">Percentage to find.</param>
	<param name="dThisNumber">Total, to find percentage of.</param>
	<remarks>Example: Dim dAnswer as Double = FindXPercent(50, 200) 'Returns 100 (50 percent of 200 is 100)</remarks>
	<returns><paramref name="Double"/>-type value of the answer.</returns>
</member><member name="M:clsCj2008.classCJ.FindPercentIncrease(System.Double,System.Double)">
	<summary>Finds percentage increase between two numbers.</summary>
	<param name="dLowerNumber">Lower number, to start from.</param>
	<param name="dHigherNumber">Higher number, where it ends.</param>
	<remarks>Example: 'Yesterday was 70 degrees, today is 90 degrees, what's the percent of the increase?</remarks>
	<returns><paramref name="Double"/>-type value of the answer.</returns>
</member><member name="M:clsCj2008.classCJ.FindPercentDecrease(System.Double,System.Double)">
	<summary>Finds percentage decrease between two numbers.</summary>
	<param name="dHigherNumber">Higher number, where to start from.</param>
	<param name="dLowerNumber">Lower number, where it ends.</param>
	<remarks>Example: 'Yesterday was 90 degrees, today is 70 degrees, what's the percent of the decrease?</remarks>
	<returns><paramref name="Double"/>-type value of the answer.</returns>
</member><member name="M:clsCj2008.classCJ.IsInt(System.Char)">
	<summary>Determines whether a single character is numerical.</summary>
	<param name="sChar">Character to examine.</param>
	<remarks>Example: Dim bNumber as Boolean = IsInt("A") 'Returns FALSE because "A" is not a number.</remarks>
	<returns><paramref name="Boolean"/> value of the answer.</returns>
</member><member name="M:clsCj2008.classCJ.IsIntStr(System.String)">
	<summary>Determines whether a string of characters is numerical.</summary>
	<param name="sString">String to examine.</param>
	<remarks>Example: Dim bNumber as Boolean = IsIntStr("12345") 'Returns TRUE because "12345" is numerical.</remarks>
	<returns><paramref name="Boolean"/> value of the answer.</returns>
</member><member name="M:clsCj2008.classCJ.IsNumeric(System.String)">
	<summary>Determines whether a string of characters is numerical.</summary>
	<param name="s">String to examine.</param>
	<remarks>Example: Dim bNumber as Boolean = IsNumeric("12345") 'Returns TRUE because "12345" is numerical.</remarks>
	<returns><paramref name="Boolean"/> value of the answer.</returns>
</member><member name="M:clsCj2008.classCJ.IsEven(System.Int32)">
	<summary>Determines whether an integer is an Even-Number.</summary>
	<param name="n">Number (Integer) to examine.</param>
	<remarks>Example: Dim bNumber as Boolean = IsEven(21) 'Returns FALSE because 21 is NOT even.</remarks>
	<returns><paramref name="Boolean"/> value of the answer.</returns>
</member><member name="M:clsCj2008.classCJ.RndNum(System.Int32)">
	<summary>Returns a random number between 0 and the maximum number you choose.</summary>
	<param name="iMaxNum">Maximum number allowed.</param>
	<remarks>Example: Dim iRand as Integer = RndNum("3") 'Could return  0, 1, 2, or 3</remarks>
	<returns><paramref name="Integer"/> value containing random number.</returns>
</member><member name="M:clsCj2008.classCJ.FixDecimal(System.String,System.Int32,System.Boolean)">
	<summary>Formats a decimal string, can fix it to look like Dollars and Cents.</summary>
	<param name="s">Decimal String to examine.</param>
	<param name="iPlaces">Decimal places to use</param>
	<param name="bMakeDollarsAndCents">if TRUE, automatically makes the string look like Dollars and Cents</param>
	<remarks>Example: Dim sDecimal as String = FixDecimal("10.456", ,True) 'Returns "10.45".
 Dim sDecimal as String = FixDecimal("10.456", 1) 'Returns "10.4"</remarks>
	<returns><paramref name="String"/> value containing the fixed decimal string.</returns>
</member><member name="M:clsCj2008.classCJ.FixDollarAmount(System.Double)">
	<summary>Formats a dollar amount.</summary>
	<param name="dDollars">Double to format.</param>
	<remarks>Example: Dim sDollars as String = FixDollarAmount(3500100.456) 'Returns "3,500,100.45".</remarks>
	<returns><paramref name="String"/> value containing the fixed dollar amount.</returns>
</member><member name="M:clsCj2008.classCJ.TrimSpace(System.String)">
	<summary>Trims the spaces from a string. No longer needed, Strings has Replace() method.</summary>
	<param name="sStrng">String to examine.</param>
	<remarks>No longer needed, use sStrng.Replace(" ", "") instead.</remarks>
	<returns><paramref name="String"/> value containing the trimmed string.</returns>
</member><member name="M:clsCj2008.classCJ.LCaseTrim(System.String)">
	<summary>Trims the spaces from a string, and returns it lower cased.</summary>
	<param name="sStringToTrim">String to examine.</param>
	<remarks>Example: Dim sLTrimmed as String = LCaseTrim(" A b C") 'Returns "abc".</remarks>
	<returns><paramref name="String"/> value containing the trimmed string.</returns>
</member><member name="M:clsCj2008.classCJ.TxtEncrypt(System.String,System.Int32,System.Boolean)">
	<summary>
 Like strEncrypt(), included for backward compatibility with Cj's apps.
 </summary>
	<param name="s">String to encrypt</param>
	<param name="iCnt">Number of characters to shift by</param>
	<param name="bForward">If True, shifts characters forward, or up through the ascii codes.</param>
	<returns>A code-shifted (encrypted) string.</returns>
	<remarks>Not for high-risk data! Mainly for obsfucating low-risk data.</remarks>
</member><member name="M:clsCj2008.classCJ.strEncrypt(System.String,System.Int32,System.Boolean)">
	<summary>
 Low-security encryption for strings. (Ascii Char Code Shift)
 </summary>
	<param name="s">String to encrypt</param>
	<param name="iCnt">Number of characters to shift by</param>
	<param name="bForward">If True, shifts characters forward, or up through the ascii codes.</param>
	<returns>A code-shifted (encrypted) string.</returns>
	<remarks>Not for high-risk data! Mainly for obsfucating low-risk data.</remarks>
</member><member name="M:clsCj2008.classCJ.TxtDecrypt(System.String,System.Int32,System.Boolean)">
	<summary>
 Like strDecrypt(), included for backward compatibility with Cj's apps.
 </summary>
	<param name="s">String to decrypt</param>
	<param name="iCnt">Number of characters shifted by</param>
	<param name="bForward">If True, shifts characters forward, or up through the ascii codes.</param>
	<returns>A de-code-shifted (decrypted) string.</returns>
	<remarks>Not for high-risk data! Mainly for obsfucating low-risk data. You must already know how many times the codes were shifted!</remarks>
</member><member name="M:clsCj2008.classCJ.strDecrypt(System.String,System.Int32,System.Boolean)">
	<summary>
 Decrypt Cj's low-security encryption (Ascii Code Shift)
 </summary>
	<param name="s">String to decrypt</param>
	<param name="iCnt">Number of characters shifted by</param>
	<param name="bForward">If True, shifts characters forward, or up through the ascii codes.</param>
	<returns>A de-code-shifted (decrypted) string.</returns>
	<remarks>Not for high-risk data! Mainly for obsfucating low-risk data. You must already know how many times the codes were shifted!</remarks>
</member><member name="M:clsCj2008.classCJ.TxtScramble(System.String)">
	<summary>
 Like strScramble(), kept for backward compatibility with Cj's apps..
 </summary>
	<param name="s">String to scramble</param>
	<returns>A scrambled string.</returns>
	<remarks>Doesn't work well with words less than 5 characters. Use strScramble(), this method may be deprecated in the future.</remarks>
</member><member name="M:clsCj2008.classCJ.strScramble(System.String)">
	<summary>
 An algorithm to make a string look 'scrambled'.
 </summary>
	<param name="s">String to scramble</param>
	<returns>A scrambled string.</returns>
	<remarks>Doesn't work well with words less than 5 characters.</remarks>
</member><member name="M:clsCj2008.classCJ.TxtScrambler(System.String,System.Int32)">
	<summary>
 Like strScramble(), kept for backward compatibility with Cj's apps.
 </summary>
	<param name="s">String to scramble</param>
	<param name="iCnt">How many times to run the algorithm</param>
	<returns>A 'scrambled' string.</returns>
	<remarks>Does not work well with words less than 5 characters. If scrambled too many times, 
 they will eventually return to normal text.
 Use strScrambler(), this method may be deprecated in the future.
 </remarks>
</member><member name="M:clsCj2008.classCJ.strScrambler(System.String,System.Int32)">
	<summary>
 Uses strScramble() several times to make a string look even more 'scrambled'
 </summary>
	<param name="s">String to scramble</param>
	<param name="iCnt">How many times to run the algorithm</param>
	<returns>A 'scrambled' string.</returns>
	<remarks>Does not work well with words less than 5 characters. If scrambled too many times, they will eventually return to normal text.</remarks>
</member><member name="M:clsCj2008.classCJ.TxtDeScrambler(System.String,System.Int32)">
	<summary>
 Like TxtDeScrambler(), kept for backward compatibility with Cj's apps.
 </summary>
	<param name="s">String to descramble</param>
	<param name="iCnt">How many times the scramble algorithm was ran</param>
	<returns>A 'descrambled' string.</returns>
	<remarks>You must know how many times the algorithm was ran when scrambled.</remarks>
</member><member name="M:clsCj2008.classCJ.strDeScrambler(System.String,System.Int32)">
	<summary>
 Uses strDescramble() a number of times to descramble text from strScrambler()
 </summary>
	<param name="s">String to descramble</param>
	<param name="iCnt">How many times the scramble algorithm was ran</param>
	<returns>A 'descrambled' string.</returns>
	<remarks>You must know how many times the algorithm was ran when scrambled.</remarks>
</member><member name="M:clsCj2008.classCJ.TxtDescramble(System.String)">
	<summary>
 Like strDescramble(), kept for backward compatibility with Cj's apps.
 </summary>
	<param name="s">String to descramble.</param>
	<returns>A 'descrambled' string.</returns>
	<remarks>Use strDescramble(), this method may be deprecated in the future.</remarks>
</member><member name="M:clsCj2008.classCJ.strDescramble(System.String)">
	<summary>
 Descrambles text from strScramble.
 </summary>
	<param name="s">String to descramble.</param>
	<returns>A 'descrambled' string.</returns>
	<remarks>Only works with text scrambled by Cj's strScramble() algorithm.</remarks>
</member><member name="M:clsCj2008.classCJ.strToByteA(System.String)">
	<summary>
 Converts a string to a byte-array.
 </summary>
	<param name="sString">String to convert.</param>
	<returns>A Byte Array.</returns>
	<remarks>Not fully functioning.</remarks>
</member><member name="M:clsCj2008.classCJ.strFromByteA(System.Byte[])">
	<summary>
 Converts a Byte-Array into a String.
 </summary>
	<param name="bByteA">Byte-Array to convert.</param>
	<returns>A String from Byte-Array.</returns>
	<remarks>Not fully functioning.</remarks>
</member><member name="M:clsCj2008.classCJ.strQuote(System.String)">
	<summary>
 Wrap a string in quotes ( s = strQuote("test") ' returns "test" )
 </summary>
	<param name="sTxt">String to wrap in quotes.</param>
	<returns>A String wrapped in quotes.</returns>
	<remarks></remarks>
</member><member name="M:clsCj2008.classCJ.strReverse(System.String)">
	<summary>
 Reverses a string, no longer needed. Uses Strings.StrReverse() now.
 </summary>
	<param name="s">String to reverse.</param>
	<returns>A reversed String.</returns>
	<remarks>No longer needed, Strings has builtin function StrReverse already.</remarks>
</member><member name="M:clsCj2008.classCJ.strCharCnt(System.String,System.String,System.Boolean)">
	<summary>
 Return the count of a char/string in a string.
 </summary>
	<param name="sStr">String to search.</param>
	<param name="sChrToCount">Character/String to count.</param>
	<param name="bCaseSensative">If True, Use case-sensative search.</param>
	<returns>An Integer containing the count of char/string.</returns>
	<remarks></remarks>
</member><member name="M:clsCj2008.classCJ.strCharTrim(System.String,System.String)">
	<summary>
 Trims all occurences of a char from string. No longer needed, use Strings.Replace().
 </summary>
	<param name="sStr">String to search.</param>
	<param name="sChrToTrim">Character to trim.</param>
	<returns>A String trimmed of certain character.</returns>
	<remarks>No longer needed, Strings has builtin function Replace. (s.Replace(" ", ""))</remarks>
</member><member name="M:clsCj2008.classCJ.strIsIPAddress(System.String)">
	<summary>
 Test if a string is an IP Address.
 </summary>
	<param name="sStr">String to test</param>
	<returns>True if string is an IP Address.</returns>
	<remarks></remarks>
</member><member name="M:clsCj2008.classCJ.strUCaseFirst(System.String,System.Boolean)">
	<summary>
 Makes the first character in a string Upper Case.
 </summary>
	<param name="sString">String to make first character uppercase.</param>
	<param name="bLCaseTheRest">If True, make all other text lowercase.</param>
	<returns>A formatted String.</returns>
	<remarks></remarks>
</member><member name="M:clsCj2008.classCJ.ShortFileName(System.String)">
	<summary>
 Like using dir(), returns a short file name from a long path...
 </summary>
	<param name="sFil">File to get shortname for...</param>
	<returns>String containing the short filename</returns>
	<remarks>dir() only works if the file exists already...</remarks>
</member><member name="M:clsCj2008.classCJ.FileDirectory(System.String)">
	<summary>
 Gets the directory portion of a long file path...
 </summary>
	<param name="sFileName">File name to get directory for...</param>
	<returns>String containing the directory for the file given</returns>
</member><member name="M:clsCj2008.classCJ.iniRead(System.String,System.String,System.String)">
	<summary>
 Read from INI file, old style ;)
 </summary>
	<param name="sFile">INI File to read from</param>
	<param name="sKey">Key to read</param>
	<param name="sDefaultValue">If Value doesn't exist, return sDefaultValue</param>
	<returns>String containing the Key's value</returns>
	<remarks>Microsoft suggests you use the registry instead...</remarks>
</member><member name="M:clsCj2008.classCJ.iniWrite(System.String,System.String,System.String)">
	<summary>
 Write to an INI File, old style ;)
 </summary>
	<param name="sFile">INI File to write...</param>
	<param name="sKey">Key to write..</param>
	<param name="sNewVal">Value for key to write</param>
	<remarks>Microsoft suggests you use the registry instead...</remarks>
</member><member name="M:clsCj2008.classCJ.UserRole">
	<summary>Gets the current user's role.</summary>
	<returns>String containing current user's role</returns>
</member><member name="M:clsCj2008.classCJ.UsersLoggedOn">
	<summary>Gets a String Array of all users logged on locally.</summary>
	<returns>String Array containing all users logged on locally.</returns>
</member><member name="M:clsCj2008.classCJ.ScreenPrint(System.String,System.Boolean)">
	<summary>
 Print Screen to file.
 </summary>
	<param name="sFileName">Filename for save file.</param>
	<param name="bIncludeTaskBar">If True, includes the Windows Taskbar in the image.</param>
	<returns>Boolean value indicating success.</returns>
	<remarks></remarks>
</member><member name="M:clsCj2008.classCJ.RegSet(Microsoft.Win32.RegistryKey,System.String,System.String,System.String)">
	<summary>Sets a Registry value (string)</summary>
	<param name="hKey">Main Key to open, Registry.LocalMachine</param>
	<param name="sSubKey">SubKey to open, "\SOFTWARE\"</param>
	<param name="valName">Name of value to set, "MyName"</param>
	<param name="valValue">Value to set, "Cj"</param>
	<returns>Returns BOOLEAN value indicating the functions success...</returns>
</member><member name="M:clsCj2008.classCJ.RegGet(Microsoft.Win32.RegistryKey,System.String,System.String)">
	<summary>Gets a Registry value...</summary>
	<param name="hKey">Main Key to open, Registry.LocalMachine</param>
	<param name="sSubKey">SubKey to open, "\SOFTWARE\"</param>
	<param name="valName">Value to get, "MyName"</param>
	<returns>Returns the registry key's value in a STRING.</returns>
</member><member name="M:clsCj2008.classCJ.RegSetCJ(System.String,System.String)">
	<summary>Set's a registry setting for Cj's Apps, LOCAL_MACHINE\SOFTWARE\Cj\sAppName\</summary>
	<param name="valName">Value Name to set</param>
	<param name="valValue">Value to set</param>
	<returns>Returns BOOLEAN value indicating the function's success</returns>
</member><member name="M:clsCj2008.classCJ.RegGetCJ(System.String,System.String)">
	<summary>Get's a registry setting for Cj's Apps, LOCAL_MACHINE\SOFTWARE\Cj\sAppName\</summary>
	<param name="valName">Value Name to get</param>
	<returns></returns>
</member><member name="M:clsCj2008.classCJ.ProcessOwnerFromHandle(System.String)">
	<summary>Gets owner (username) of process handle</summary>
	<param name="sHandle">String containing handle for process</param>
	<returns>String containing username for process owner</returns>
</member><member name="M:clsCj2008.classCJ.ProcessGetExplorerHandles">
	<summary>Gets String Array containing handles for all explorer.exe processes</summary>
	<returns>String Array containing all explorer.exe handles</returns>
</member><member name="M:clsCj2008.classCJ.SystemShutdownEx(System.Int32,System.Boolean)">
	<summary>System Shutdown/Reboot/Logoff/Abort shutdown of system</summary>
	<param name="iShutdownMethod">0=LogOff, 1=Shutdown, 8=Shutdown, 2=Reboot, 4=Combine with others to force application termination...</param>
	<param name="bShowMsg">If True, displays a MessageBox on error.</param>
	<returns>Boolean value indicating success or failure..</returns>
	<remarks>iShutdownMethod 4 can be used in conjunction with the others. 0 + 4 will Logoff and force termination of all applications...</remarks>
</member><member name="M:clsCj2008.classCJ.SystemShutdownSimple(System.String)">
	<summary>System Shutdown/Reboot/Log Off/Abort Shutdown (Simple Method)</summary>
	<param name="sShutDownMethod">Acceptable Strings: "shutdown", "restart", "logoff", "abort"</param>
	<returns>Boolean value indicating success or failure</returns>
</member><member name="T:clsCj2008.classCJ">
	<summary>Class written by Cj to handle a variety of tasks.</summary>
	<remarks>Not 100% functional, no warranties, no guarantees.</remarks>
</member><member name="T:clsCj2008.SubClassing">
	<summary>Class used for SubClassing, Created by "theAngryCoder"</summary>
	<remarks>Experimental, under revision</remarks>
</member><member name="T:clsCj2008.Msgs">
	<summary>Windows Messages</summary>
	<remarks>All windows messages...</remarks>
</member><member name="T:clsCj2008.MathExp">
	<summary>Evaluate math string expresions, "1+1-2=0"</summary>
	<remarks>Not written by Cj</remarks>
</member><member name="M:clsCj2008.CmdLineOut.#ctor(System.String,System.String,System.Boolean)">
	<summary>Creates a new CmdLineOut capturer...</summary>
	<param name="fName">Filename for process to run, "ping.exe"</param>
	<param name="sArguments">Arguments to include in command line, "127.0.0.1"</param>
	<param name="bHideWindow">Hide or show the CMD window.</param>
	<remarks>Create this capturer, and then do: Capturer.GetOutputString()</remarks>
</member><member name="M:clsCj2008.CmdLineOut.Dispose">
	<summary>Disposes of the objects this class uses..</summary>
</member><member name="M:clsCj2008.CmdLineOut.GetOutputString(System.Boolean,System.Int32)">
	<summary>Return results from process</summary>
	<param name="bLoopUntilExit">Loops until the process ends...</param>
	<param name="iTimeout">Sets a time (milliseconds) to wait for process to end before reading output.</param>
	<returns>Returns a STRING value containing the process' output.</returns>
</member><member name="T:clsCj2008.CmdLineOut">
	<summary>Captures command-line output</summary>
	<remarks>Runs a command line process and returns a string containing the output.</remarks>
	<example>Example:
 'This runs the command with an argument.<br/>
 Dim myCmd as New clsCj2008.CmdLineOut("ping.exe", "127.0.0.1")
 'This returns the output of that command.
 msgbox(myCmd.GetOutputString())
 'WARNING: If program is expecting input, beyond just arguments, this method will fail!</example>
</member>
</members>
</doc>